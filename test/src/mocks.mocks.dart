// Mocks generated by Mockito 5.4.5 from annotations
// in resizable_navigator/test/src/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ui' as _i3;

import 'package:flutter/material.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:resizable_navigator/src/navigator_event_observer.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [NavigatorEventListener].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorEventListener extends _i1.Mock
    implements _i2.NavigatorEventListener {
  @override
  _i3.VoidCallback? didInstall(_i4.Route<dynamic>? route) =>
      (super.noSuchMethod(
        Invocation.method(#didInstall, [route]),
        returnValueForMissingStub: null,
      ) as _i3.VoidCallback?);

  @override
  void didReplace(_i4.Route<dynamic>? route, _i4.Route<dynamic>? oldRoute) =>
      super.noSuchMethod(
        Invocation.method(#didReplace, [route, oldRoute]),
        returnValueForMissingStub: null,
      );

  @override
  void didAdd(_i4.Route<dynamic>? route) => super.noSuchMethod(
        Invocation.method(#didAdd, [route]),
        returnValueForMissingStub: null,
      );

  @override
  void didPush(_i4.Route<dynamic>? route) => super.noSuchMethod(
        Invocation.method(#didPush, [route]),
        returnValueForMissingStub: null,
      );

  @override
  void didComplete(_i4.Route<dynamic>? route, Object? result) =>
      super.noSuchMethod(
        Invocation.method(#didComplete, [route, result]),
        returnValueForMissingStub: null,
      );

  @override
  void didPop(_i4.Route<dynamic>? route, Object? result) => super.noSuchMethod(
        Invocation.method(#didPop, [route, result]),
        returnValueForMissingStub: null,
      );

  @override
  void didPopNext(_i4.Route<dynamic>? route, _i4.Route<dynamic>? nextRoute) =>
      super.noSuchMethod(
        Invocation.method(#didPopNext, [route, nextRoute]),
        returnValueForMissingStub: null,
      );

  @override
  void didChangeNext(
    _i4.Route<dynamic>? route,
    _i4.Route<dynamic>? nextRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(#didChangeNext, [route, nextRoute]),
        returnValueForMissingStub: null,
      );

  @override
  void didChangePrevious(
    _i4.Route<dynamic>? route,
    _i4.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(#didChangePrevious, [route, previousRoute]),
        returnValueForMissingStub: null,
      );

  @override
  void didEndTransition(_i4.Route<dynamic>? route) => super.noSuchMethod(
        Invocation.method(#didEndTransition, [route]),
        returnValueForMissingStub: null,
      );

  @override
  void didStartTransition(
    _i4.Route<dynamic>? currentRoute,
    _i4.Route<dynamic>? nextRoute,
    _i4.Animation<double>? animation, {
    bool? isUserGestureInProgress = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #didStartTransition,
          [currentRoute, nextRoute, animation],
          {#isUserGestureInProgress: isUserGestureInProgress},
        ),
        returnValueForMissingStub: null,
      );
}
